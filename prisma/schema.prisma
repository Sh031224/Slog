generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?   @db.Text
  fcmToken      String?   @db.VarChar(255)
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  Comment       Comment[]
  Reply         Reply[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now())
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  orderNumber Int
  createdAt   DateTime @default(now())
  Post        Post[]

  @@map("categories")
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String     @db.VarChar(255)
  description String?    @db.VarChar(255)
  thumbnail   String?    @db.VarChar(300)
  type        PostType
  content     String?    @db.Text
  isTemp      Boolean    @default(false)
  updatedAt   DateTime   @updatedAt
  createdAt   DateTime   @default(now())
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])
  PostView    PostView[]
  Comment     Comment[]
  Reply       Reply[]

  @@index([categoryId])
  @@map("posts")
}

model PostView {
  id        Int      @id @default(autoincrement())
  ip        String   @db.VarChar(255)
  createdAt DateTime @default(now())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("post_views")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(255)
  isPrivate Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  postId    Int
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
  Reply     Reply[]

  @@index([postId])
  @@index([userId])
  @@map("comments")
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(255)
  isPrivate Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  commentId Int
  userId    String
  postId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([commentId])
  @@index([postId])
  @@index([userId])
  @@map("replies")
}

enum PostType {
  DEFAULT  @map("DEFAULT")
  EXTERNAL @map("EXTERNAL")
}
